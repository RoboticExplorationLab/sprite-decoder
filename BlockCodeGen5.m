%Generator matrix for a (16,8,5) code
%This was generated by the GAP package GUAVA
%using the function BestKnownLinearCode(16,8,GF(2))
G = [1 0 0 1 1 1 1 0 1 0 0 0 0 0 0 0;
     0 1 0 0 1 1 1 0 0 1 0 0 0 0 0 0;
     1 1 0 0 1 1 0 1 0 0 1 0 0 0 0 0;
     0 1 1 0 0 1 1 1 0 0 0 1 0 0 0 0;
     0 0 1 1 0 0 1 1 0 0 0 0 1 0 0 0;
     1 1 1 1 0 0 1 0 0 0 0 0 0 1 0 0;
     0 1 1 1 1 0 0 0 0 0 0 0 0 0 1 0;
     1 1 0 1 0 1 1 1 0 0 0 0 0 0 0 1];

%Generate C-style array of G for MCU code
GarrayText = sprintf('unsigned char G[8][16] = {');

for j = 1:8
    GarrayText = strcat(GarrayText, sprintf(...
        '\n  {%u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u}',...
        G(j,:)));
    
    if j<8
        GarrayText = strcat(GarrayText, ',');
    else
        GarrayText = strcat(GarrayText, sprintf('};'));
    end
end

%Generate a matrix of all possible message words
M = de2bi(0:(2^8-1),8,'left-msb');
M = gf(M,1); %this converts the matrix to a GF(2) array

%Multiply all messages by G to generate matrix of all possible code words
C = M*G;

%Convert C back to floating point
C = double(C.x);

%Convert C from 1,0 to +/-1
C = 2*C-1; 

%Generate C-style array of C for GNURadio code
CarrayText = sprintf('static float C[%d][%d] = {', size(C,1), size(C,2));

for j = 1:size(C,1)
    CarrayText = strcat(CarrayText, sprintf(...
        '\n  {%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d}',...
        C(j,:)));
    
    if j<size(C,1)
        CarrayText = strcat(CarrayText, ',');
    else
        CarrayText = strcat(CarrayText, sprintf('};'));
    end
end